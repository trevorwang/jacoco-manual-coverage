apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.3"
}

// if you have Robolectric tests in your suite.
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}


project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"
        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."
            // 设置报告格式
            reports {
                html.enabled = true
                xml.enabled = true
            }

            // 排除不需要统计的类
            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*'
            ]
            // Java 类文件
            def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: excludes)
            // Kotlin 文件
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            classDirectories = files([javaClasses, kotlinClasses])
            // 源文件
            sourceDirectories = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ])
            // 最开始我们生成的文件
            executionData = files([
                    "${project.buildDir}/jacoco/${testTaskName}.exec",
                    "${rootDir}/jacoco/jacoco-coverage.ec"
            ])
        }
    }
}